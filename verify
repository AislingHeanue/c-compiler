#!/bin/bash

### May change for other devices/languages being used ###
root_test_path="../../nlsandler/writing-a-c-compiler-tests"
binary="target/release/c-compiler"
###
if [[ -n "$COMMENTS" ]]; then
	binary="$binary --comments"
fi

chapter=$1
stage=$2
name=$(echo "$3" | cut -d. -f1)

# first_file=$(find "$root_test_path/tests/chapter_$chapter/valid/extra_credit" -mindepth 1 -maxdepth 4 -name "$name.c")
first_file=$(find "$root_test_path/tests/chapter_$chapter" -mindepth 1 -maxdepth 5 -name "$name.c")

# Flatten results in case there's more than one
first_file=$(echo $first_file)
clone_file=${first_file/.c/_client.c}

if [[ -z $first_file ]]; then
	echo file not found
	exit 1
fi

if [[ -f $clone_file ]]; then
	file=$(echo "$first_file $clone_file")
else
	file=$first_file
fi
bat $file --paging=never --theme "Visual Studio Dark+"

case $stage in
lex)
	bash -c "$binary $file --lex"
	;;
parse)
	# Pretty print the output tree as something like C.
	bash -c "$binary $file --parse > out && bat -l go --paging=never --theme \"Visual Studio Dark+\" < out || cat out; rm out"
	;;
validate)
	# Pretty print the output tree as something like C.
	bash -c "$binary $file --validate > out && bat -l go --paging=never --theme \"Visual Studio Dark+\" < out || cat out; rm out"
	;;
tacky)
	bash -c "$binary $file --tacky"
	;;
optimize)
	bash -c "$binary $file --tacky"
	bash -c "$binary $file --tacky --optimize"
	;;
codegen)
	bash -c "$binary $file --codegen"
	;;
run)
	output_name=${first_file%.c}

	echo "Unoptimized code:"
	bash -c "$binary $file -S" | bat -l asm --paging=never --theme "Visual Studio Dark+"
	bash -c "$binary $file"
	$output_name
	unoptimized_result_code=$?
	echo "Unoptimized result of $name: $unoptimized_result_code"

	echo
	echo "Code:"
	bash -c "$binary $file -S --optimize" | bat -l asm --paging=never --theme "Visual Studio Dark+"
	bash -c "$binary $file --optimize"
	$output_name
	result_code=$?
	echo "Result of $name: $result_code"
	;;
esac
